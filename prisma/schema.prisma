// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COLLABORATOR
  CLIENT
}

enum ProcessoStatus {
  ATIVO
  ARQUIVADO
  ENCERRADO
  SUSPENSO
}

enum TipoProcesso {
  CIVEL
  TRABALHISTA
  CRIMINAL
  FAMILIA
  TRIBUTARIO
  ADMINISTRATIVO
  OUTRO
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  avatar    String?
  role      Role     @default(COLLABORATOR)
  password  String
  status    Boolean  @default(true)
  
  oab       String?
  ufOab     String?
  
  processos Processo[] @relation("AdvogadoProcessos")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  avatar    String?
  password  String
  cpf       String   @unique
  phone     String
  birthDate String
  sex       String
  role      Role     @default(CLIENT)
  status    Boolean  @default(true)

  endereco  Endereco[]
  document  Document[]
  processos Processo[] @relation("ClienteProcessos")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Endereco {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String   @db.ObjectId
  bairro      String
  endereco    String
  numero      String
  complemento String?
  estado      String
  cidade      String
  cep         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([clientId])
  @@index([cep])
}

model Document {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String   @db.ObjectId
  name        String
  fileUrl     String
  fileKey     String
  fileSize    Int?
  mimeType    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([clientId])
}

model Processo {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  numeroProcesso   Int            @unique
  tipo             TipoProcesso   @default(CIVEL)
  status           ProcessoStatus @default(ATIVO)
  
  dataAbertura     DateTime       @default(now())
  dataEncerramento DateTime?
  
  client           Client         @relation("ClienteProcessos", fields: [clientId], references: [id], onDelete: Cascade)
  clientId         String         @db.ObjectId

  responsavel      User           @relation("AdvogadoProcessos", fields: [responsavelId], references: [id], onDelete: Cascade)
  responsavelId    String         @db.ObjectId
  
  parteContraria   String
  
  documentos       DocumentoProcesso[]

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  @@index([clientId])
  @@index([responsavelId])
  @@index([status])
}


model DocumentoProcesso {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  processo    Processo @relation(fields: [processoId], references: [id], onDelete: Cascade)
  processoId  String   @db.ObjectId
  
  nome        String   
  descricao   String?  
  tipo        String? 
  

  fileUrl     String
  fileKey     String
  fileSize    Int?
  mimeType    String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([processoId])
  @@index([tipo])
}
  