generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COLLABORATOR
  CLIENT
}

enum ProcessoStatus {
  ATIVO
  ARQUIVADO
  ENCERRADO
  SUSPENSO
}

enum TipoProcesso {
  CIVEL
  TRABALHISTA
  CRIMINAL
  FAMILIA
  TRIBUTARIO
  ADMINISTRATIVO
  OUTRO
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String  @unique
  avatar   String?
  role     Role    @default(COLLABORATOR)
  password String
  status   Boolean @default(true)

  oab   String?
  ufOab String?

  processos Processo[] @relation("AdvogadoProcessos")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String  @unique
  avatar     String?
  password   String
  cpf        String  @unique
  phone      String
  firstAcess Boolean @default(false)
  birthDate  String
  sex        String
  role       Role    @default(CLIENT)
  status     Boolean @default(true)

  endereco     Endereco[]
  document     Document[]
  processos    Processo[]    @relation("ClienteProcessos")
  agendamentos Agendamento[]
  boletos      Boleto[]

  firstAcessAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([expiresAt])
}

model Endereco {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String   @db.ObjectId
  bairro      String
  endereco    String
  numero      String
  complemento String?
  estado      String
  cidade      String
  cep         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([clientId])
  @@index([cep])
}

model Document {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId  String   @db.ObjectId
  name      String
  fileUrl   String
  fileKey   String
  fileSize  Int?
  mimeType  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
}

model Processo {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  numeroProcesso Int            @unique
  tipo           TipoProcesso   @default(CIVEL)
  status         ProcessoStatus @default(ATIVO)
  tribunal       String

  dataAbertura     DateTime  @default(now())
  dataEncerramento DateTime?

  client   Client @relation("ClienteProcessos", fields: [clientId], references: [id], onDelete: Cascade)
  clientId String @db.ObjectId

  responsavel   User   @relation("AdvogadoProcessos", fields: [responsavelId], references: [id], onDelete: Cascade)
  responsavelId String @db.ObjectId

  parteContraria String

  documentos DocumentoProcesso[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([responsavelId])
  @@index([status])
}

model DocumentoProcesso {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  processo   Processo @relation(fields: [processoId], references: [id], onDelete: Cascade)
  processoId String   @db.ObjectId

  nome      String
  descricao String?
  tipo      String?

  fileUrl  String
  fileKey  String
  fileSize Int?
  mimeType String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([processoId])
  @@index([tipo])
}

model Agendamento {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String @db.ObjectId

  titulo    String
  descricao String?
  dataHora  DateTime
  local     String?
  link      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([dataHora])
}

model Boleto {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String @db.ObjectId

  titulo         String
  observacao     String?
  status         Boolean  @default(true)
  dataVencimento DateTime

  fileUrl  String
  fileKey  String
  fileSize Int?
  mimeType String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([dataVencimento])
}
